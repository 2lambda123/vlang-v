// V_COMMIT_HASH 1b26ce1
// V_CURRENT_COMMIT_HASH fe65cde
// Generated by the V compiler

"use strict";

// https://www.npmjs.com/package/fast-deep-equal - 3/3/2021
const envHasBigInt64Array = typeof BigInt64Array !== 'undefined';
function vEq(a, b) {
	if (a === b) return true;

	if (a && b && typeof a == 'object' && typeof b == 'object') {
		if (a.constructor !== b.constructor) return false;

		var length, i, keys;
		if (Array.isArray(a)) {
			length = a.length;
			if (length != b.length) return false;
			for (i = length; i-- !== 0;)
				if (!vEq(a[i], b[i])) return false;
			return true;
		}


		if ((a instanceof Map) && (b instanceof Map)) {
			if (a.size !== b.size) return false;
			for (i of a.entries())
				if (!b.has(i[0])) return false;
			for (i of a.entries())
				if (!vEq(i[1], b.get(i[0]))) return false;
			return true;
		}

		if ((a instanceof Set) && (b instanceof Set)) {
			if (a.size !== b.size) return false;
			for (i of a.entries())
				if (!b.has(i[0])) return false;
			return true;
		}

		if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
			length = a.length;
			if (length != b.length) return false;
			for (i = length; i-- !== 0;)
				if (a[i] !== b[i]) return false;
			return true;
		}


		if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
		if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
		if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

		keys = Object.keys(a);
		length = keys.length;
		if (length !== Object.keys(b).length) return false;

		for (i = length; i-- !== 0;)
			if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

		for (i = length; i-- !== 0;) {
			var key = keys[i];

			if (!vEq(a[key], b[key])) return false;
		}

		return true;
	}

	// true if both NaN, false otherwise
	return a !== a && b !== b;
};
/** @namespace builtin */
const builtin = (function () {
	function i8(val = new Number(0)) { this.val = val | 0 }
	i8.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return this.valueOf().toString() },
		eq(other) { return this.valueOf() === other.valueOf() },
	};

	function i16(val = new Number(0)) { this.val = val | 0 }
	i16.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return this.valueOf().toString() },
		eq(other) { return this.valueOf() === other.valueOf() },
	};

	function int(val = new Number(0)) { this.val = val | 0 }
	int.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return this.valueOf().toString() },
		eq(other) { return this.valueOf() === other.valueOf() },
	};

	function i64(val = new Number(0)) { this.val = val | 0 }
	i64.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return this.valueOf().toString() },
		eq(other) { return this.valueOf() === other.valueOf() },
	};

	function byte(val = new Number(0)) { this.val = typeof (val) == "string" ? val.charCodeAt() : (val | 0) }
	byte.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return String.fromCharCode(this.val) },
		eq(other) { return this.valueOf() === other.valueOf() },
	};

	function u16(val = new Number(0)) { this.val = val | 0 }
	u16.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return this.valueOf().toString() },
		eq(other) { return this.valueOf() === other.valueOf() },
	};

	function u32(val = new Number(0)) { this.val = val | 0 }
	u32.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return this.valueOf().toString() },
		eq(other) { return this.valueOf() === other.valueOf() },
	};

	function u64(val = new Number(0)) { this.val = val | 0 }
	u64.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return this.valueOf().toString() },
		eq(other) { return this.valueOf() === other.valueOf() },
	};

	function f32(val = new Number(0)) { this.val = val }
	f32.prototype = {
		val: new Number(0),
		valueOf() { return this.val },
		toString() { return this.val.toString() },
		eq(other) { return this.val === other.val },
	};

	function f64(val = new Number(0)) { this.val = val }
	f64.prototype = {
		val: new Number(0),
		valueOf() { return this.val },
		toString() { return this.val.toString() },
		eq(other) { return this.val === other.val },
	};

	function int_literal(val = new Number(0)) { this.val = val | 0 }
	int_literal.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return this.valueOf().toString() },
		eq(other) { return this.valueOf() === other.valueOf() },
	};

	function float_literal(val = new Number(0)) { this.val = val }
	float_literal.prototype = {
		val: new Number(0),
		valueOf() { return this.val },
		toString() { return this.val.toString() },
		eq(other) { return this.val === other.val },
	};

	function size_t(val = new Number(0)) { this.val = val | 0 }
	size_t.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return this.valueOf().toString() },
		eq(other) { return this.valueOf() === other.valueOf() },
	};

	function bool(val = new Boolean(false)) { this.val = val }
	bool.prototype = {
		val: new Boolean(false),
		valueOf() { return this.val },
		toString() { return this.val.toString() },
		eq(other) { return this.val === other.val },
	};

	function string(str = new String("")) { this.str = str.toString(); this.len = this.str.length }
	string.prototype = {
		str: new String(""),
		/**
		 * @function
		 * @param {int} a
		 * @param {int} b
		 * @returns {string}
		*/
		slice(a, b, s = this) {
			return new string((function () {
				let result = s.str.slice(a, b);
				return result;
			})()
				.toString());
		},
		/**
		 * @function
		 * @param {string} dot
		 * @returns {string}
		*/
		after(dot, s = this) {
			return new string((function () {
				let result = s.str.slice((function () {
					let result = s.str.lastIndexOf(dot.str);
					return result;
				})()
					+ new int(1), new int(s.str.length));
				return result;
			})()
				.toString());
		},
		/**
		 * @function
		 * @param {byte} dot
		 * @returns {string}
		*/
		after_char(dot, s = this) {
			return s;
		},
		/**
		 * @function
		 * @param {string} dot
		 * @returns {string}
		*/
		all_after(dot, s = this) {
			return new string((function () {
				let result = s.str.slice((function () {
					let result = s.str.indexOf(dot.str);
					return result;
				})()
					+ new int(1), new int(s.str.length));
				return result;
			})()
				.toString());
		},
		/**
		 * @function
		 * @param {string} dot
		 * @returns {string}
		*/
		all_after_last(dot, s = this) {
			return (function () {
				let result = s.after(dot);
				return result;
			})()
				;
		},
		/**
		 * @function
		 * @param {string} dot
		 * @returns {string}
		*/
		all_before(dot, s = this) {
			return new string((function () {
				let result = s.str.slice(0, (function () {
					let result = s.str.indexOf(dot.str);
					return result;
				})()
				);
				return result;
			})()
				.toString());
		},
		/**
		 * @function
		 * @param {string} dot
		 * @returns {string}
		*/
		all_before_last(dot, s = this) {
			return new string((function () {
				let result = s.str.slice(0, (function () {
					let result = s.str.lastIndexOf(dot.str);
					return result;
				})()
				);
				return result;
			})()
				.toString());
		},
		/**
		 * @function
		 * @returns {bool}
		*/
		bool(s = this) {
			return s.eq(new string('true'));
		},
		/**
		 * @function
		 * @param {string} dot
		 * @returns {array(string)}
		*/
		split(dot, s = this) {
			return (function () {
				let result = (function () {
					let result = s.str.split(dot.str);
					return result;
				})()
					.map(it => new string(it.toString()));
			},
				/**
				 * @function
				 * @returns {array(byte)}
				*/
				bytes(s = this) {
				/** @type {string} */
				const sep = new string('');
				return (function () {
					let result = (function () {
						let result = s.str.split(sep.str);
						return result;
					})()
						.map(it => (function () {
							let result = it.charCodeAt(0);
							return result;
						})()
						);
				},
					/**
					 * @function
					 * @returns {string}
					*/
					capitalize(s = this) {
					/** @type {string} */
					const part = new string(new string((function () {
						let result = s.str.slice(1, new int(s.str.length));
						return result;
					})()
						.toString()));
					return new string((function () {
						let result = (function () {
							let result = (function () {
								let result = s.str.charAt(0);
								return result;
							})()
								.toUpperCase();
							return result;
						})()
							.concat(part.str);
						return result;
					})()
						.toString());
				},
				/**
				 * @function
				 * @returns {string}
				*/
				clone(s = this) {
					return new string(s.str.toString());
				},
				/**
				 * @function
				 * @param {string} substr
				 * @returns {bool}
				*/
				contains(substr, s = this) {
					return (function () {
						let result = s.str.includes(substr.str);
						return result;
					})()
						;
				},
				/**
				 * @function
				 * @param {string} chars
				 * @returns {bool}
				*/
				contains_any(chars, s = this) {
					/** @type {string} */
					const sep = new string('');
					for (const x of (function () {
						let result = chars.str.split(sep.str);
						return result;
					})()
					) {
						if ((function () {
							let result = s.str.includes(x);
							return result;
						})()
						) {
							return true;
						}

					}

					return false;
				},
				/**
				 * @function
				 * @param {array(string)} chars
				 * @returns {bool}
				*/
				contains_any_substr(chars, s = this) {
					for (const x of chars) {
						if ((function () {
							let result = s.str.includes(x.str);
							return result;
						})()
						) {
							return true;
						}

					}

					return false;
				},
				/**
				 * @function
				 * @param {string} substr
				 * @returns {int}
				*/
				count(substr, s = this) {
					/** @type {array(String)} */
					const arr = (function () {
						let result = s.str.split(substr.str);
						return result;
					})()
						;
					return (function () {
						let result = native_str_arr_len(arr);
						return result;
					})()
						;
				},
				/**
				 * @function
				 * @param {string} p
				 * @returns {bool}
				*/
				ends_with(p, s = this) {
					return (function () {
						let result = s.str.ends_with(p.str);
						return result;
					})()
						;
				},
				/**
				 * @function
				 * @param {string} p
				 * @returns {bool}
				*/
				starts_with(p, s = this) {
					return (function () {
						let result = s.str.starts_with(p.str);
						return result;
					})()
						;
				},
				/**
				 * @function
				 * @returns {array(string)}
				*/
				fields(s = this) {
					return [];
				},
				/**
				 * @function
				 * @param {string} start
				 * @param {string} end
				 * @returns {string}
				*/
				find_between(start, end, s = this) {
					return new string((function () {
						let result = s.str.slice((function () {
							let result = s.str.indexOf(start.str);
							return result;
						})()
							, (function () {
								let result = s.str.indexOf(end.str);
								return result;
							})()
							+ new int(1));
						return result;
					})()
						.toString());
				},
				/**
				 * @function
				 * @returns {void}
				*/
				free(s = this) {
				},
				/**
				 * @function
				 * @returns {int}
				*/
				hash(s = this) {
					/** @type {u32} */
					let h = new u32();
					if (h.eq(0) && s.len > new int(0)) {
						for (const c of s.str.split('').map(c => new byte(c))) {
							/** @type {u32} */
							h = new u32(h * 31 + new u32(c));
						}

					}

					return new int(h);
				},
				/**
				 * @function
				 * @returns {int}
				*/
				int(s = this) {
					return new int((function () {
						let result = parseInt(s);
						return result;
					})()
					);
				},
				/**
				 * @function
				 * @returns {i64}
				*/
				i64(s = this) {
					return new i64((function () {
						let result = parseInt(s);
						return result;
					})()
					);
				},
				/**
				 * @function
				 * @returns {i8}
				*/
				i8(s = this) {
					return new i8((function () {
						let result = parseInt(s);
						return result;
					})()
					);
				},
				/**
				 * @function
				 * @returns {i16}
				*/
				i16(s = this) {
					return new i16((function () {
						let result = parseInt(s);
						return result;
					})()
					);
				},
				/**
				 * @function
				 * @returns {f32}
				*/
				f32(s = this) {
					return new f32((function () {
						let result = parseFloat(s);
						return result;
					})()
					);
				},
				/**
				 * @function
				 * @returns {f64}
				*/
				f64(s = this) {
					return new f64((function () {
						let result = parseFloat(s);
						return result;
					})()
					);
				},
				/**
				 * @function
				 * @returns {u16}
				*/
				u16(s = this) {
					return new u16((function () {
						let result = parseInt(s);
						return result;
					})()
					);
				},
				/**
				 * @function
				 * @returns {u32}
				*/
				u32(s = this) {
					return new u32((function () {
						let result = parseInt(s);
						return result;
					})()
					);
				},
				/**
				 * @function
				 * @returns {u64}
				*/
				u64(s = this) {
					return new u64((function () {
						let result = parseInt(s);
						return result;
					})()
					);
				},
				valueOf() { return this.str },
				toString() { return this.str },
				eq(other) { return this.str === other.str },
			};

			function map(map = new Map()) { this.map = map }
			map.prototype = {
				map: new Map(),
				valueOf() { return this.map },
				toString() { return this.map.toString() },
				eq(other) { return vEq(this, other) },
			};

			function array(arr = new Array()) { this.arr = arr }
			array.prototype = {
				arr: new Array(),
				valueOf() { return this.arr },
				toString() { return JSON.stringify(this.arr.map(it => it.valueOf())) },
				eq(other) { return vEq(this, other) },
			};

			/**
			 * @function
			 * @param {any} s
			 * @returns {void}
			*/
			function js_throw(s) {
				throw (s instanceof Error ? s : new Error(s))
			}

			/**
			 * @function
			 * @param {any} s
			 * @returns {void}
			*/
			function println(s) {
				(function () {
					let result = console.log((function () {
						let result = s.toString();
						return result;
					})()
					);
					return result;
				})()
					;
			}

			/**
			 * @function
			 * @param {any} s
			 * @returns {void}
			*/
			function print(s) {
				(function () {
					let result = process.stdout.write((function () {
						let result = s.toString();
						return result;
					})()
					);
					return result;
				})()
					;
			}

			/**
			 * @function
			 * @param {any} s
			 * @returns {void}
			*/
			function eprintln(s) {
				(function () {
					let result = console.error((function () {
						let result = s.toString();
						return result;
					})()
					);
					return result;
				})()
					;
			}

			/**
			 * @function
			 * @param {any} s
			 * @returns {void}
			*/
			function eprint(s) {
				(function () {
					let result = process.stderr.write((function () {
						let result = s.toString();
						return result;
					})()
					);
					return result;
				})()
					;
			}

			/**
			 * @function
			 * @param {int} c
			 * @returns {void}
			*/
			function exit(c) {
				(function () {
					let result = process.exit(c);
					return result;
				})()
					;
				(function () {
					let result = builtin.js_throw(new string(`exit(${c})`));
					return result;
				})()
					;
			}

			/**
			 * @function
			 * @param {any} opt
			 * @returns {any}
			*/
			function unwrap(opt) {
				/** @type {Option} */
				const o = { value: new Option(opt) };
				if (!(o.state.eq(0))) {
					(function () {
						let result = builtin.js_throw(o.err);
						return result;
					})()
						;
				}

				return opt;
			}

			/**
			 * @function
			 * @param {string} s
			 * @returns {void}
			*/
			function panic(s) {
				(function () {
					let result = builtin.eprintln(new string(`V panic: ${s}`));
					return result;
				})()
					;
				(function () {
					let result = builtin.exit(1);
					return result;
				})()
					;
			}

			/**
			 * @constructor
			 * @param {{state?: byte, err?: Error}} init
			*/
			function Option({ state = new byte(0), err = new Error({}) }) {
				this.state = state
				this.err = err
			};
			Option.prototype = {
				/** @type {byte} */
				state: new byte(0),
				/** @type {Error} */
				err: new Error({}),
				/**
				 * @function
				 * @returns {string}
				*/
				str(o = this) {
					if (o.state.eq(0)) {
						return new string('Option{ ok }');
					}

					if (o.state.eq(1)) {
						return new string('Option{ none }');
					}

					return new string(`Option{ error: "${o.err}" }`);
				},
				toString() {
					return `Option { state: ${this["state"].toString()} , err: ${this["err"].toString()} }`
				}
			};

			/**
			 * @constructor
			 * @param {{msg?: string, code?: int}} init
			*/
			function Error({ msg = new string(""), code = new int(0) }) {
				this.msg = msg
				this.code = code
			};
			Error.prototype = {
				/** @type {string} */
				msg: new string(""),
				/** @type {int} */
				code: new int(0),
				toString() {
					return `Error { msg: "${this["msg"].toString()}", code: ${this["code"].toString()} }`
				}
			};

			/**
			 * @function
			 * @param {string} s
			 * @returns {Option}
			*/
			function error(s) {
				return new Option({
					state: new int(2),
					err: new Error({
						msg: s
					})
				});
			}

			/**
			 * @function
			 * @param {string} s
			 * @param {int} code
			 * @returns {Option}
			*/
			function error_with_code(s, code) {
				return new Option({
					state: new int(2),
					err: new Error({
						msg: s,
						code: code
					})
				});
			}

			/**
			 * @function
			 * @param {array(String)} arr
			 * @returns {int}
			*/
			function native_str_arr_len(arr) {
				/** @type {int} */
				const len = new int(0);
				len = arr.length
				return len;
			}

			/**
			 * @function
			 * @returns {node_process}
			*/
			function js_node_process() {
				return process
				return new node_process({});
			}



			/* module exports */
			return {
				i8,
				i16,
				int,
				i64,
				byte,
				u16,
				u32,
				u64,
				f32,
				f64,
				int_literal,
				float_literal,
				size_t,
				bool,
				string,
				map,
				array,
				js_throw,
				println,
				print,
				eprintln,
				eprint,
				exit,
				unwrap,
				panic,
				Error,
				error,
				error_with_code,
				js_node_process
			};
		})();
	// builtin type casts
	const [i8, i16, int, i64, byte, u16, u32, u64, f32, f64, int_literal, float_literal, size_t, bool, string, map, array] = [
		function (val) { return new builtin.i8(val) },
		function (val) { return new builtin.i16(val) },
		function (val) { return new builtin.int(val) },
		function (val) { return new builtin.i64(val) },
		function (val) { return new builtin.byte(val) },
		function (val) { return new builtin.u16(val) },
		function (val) { return new builtin.u32(val) },
		function (val) { return new builtin.u64(val) },
		function (val) { return new builtin.f32(val) },
		function (val) { return new builtin.f64(val) },
		function (val) { return new builtin.int_literal(val) },
		function (val) { return new builtin.float_literal(val) },
		function (val) { return new builtin.size_t(val) },
		function (val) { return new builtin.bool(val) },
		function (val) { return new builtin.string(val) },
		function (val) { return new builtin.map(val) },
		function (val) { return new builtin.array(val) }
	]
	/** @namespace main */
	const main = (function () {
		/**
	 * @function
	 * @param {int} x
	 * @returns {void}
	*/
		function f(x) {
			/** @type {int} */
			x.value = int(44);
		}

		/* program entry point */
		(function () {
			/** @type {int} */
			let x = int(42);
			(function () {
				let result = f(x);
				return result;
			})()
				;
			(function () {
				let result = builtin.println(x);
				return result;
			})()
				;
		})();



		/* module exports */
		return {};
	})();


