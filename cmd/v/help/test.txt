Usage:
  v [-stats] test FILE|DIRECTORY[...]
    Runs test functions in the given FILEs and DIRECTORYs

    If '-stats' is given, more statistics about the tests are printed along
    with a report of passes/failures

NB 1: very frequently, when you work on a module you can cd into its folder,
and then you can perform:
	  v test .
... to run all the module's '_test.v' files.

NB 2: V builtin testing requires you to name your files with a _test.v
suffix, and to name your test functions with test_ prefix. Each function,
that starts with 'fn test_', and that is in a '_test.v' file will be called
automatically by the test framework.

NB 3: You can use `assert condition` inside each 'test_' function. If the
asserted condition fails, then v will record that, and produce a more detailed
error message, about where the failure was.

NB 4: Alternative test runners (for IDE integrations):
You can use several alternative test result formats, using `-test-runner name`,
or by setting VTEST_RUNNER (the command line option has higher priority).

The names of the available test runners are:
	`simple` Fastest, does not import additional modules, does no processing.
	`tap`    Format the output as required by the Test Anything Protocol (TAP).
	`normal` Supports color output, nicest/most human readable, the default.

	`coderunner` https://github.com/codewars/runner/blob/main/docs/messages.md

You can also implement your own custom test runner, by providing the path to
your .v file, that implements it to this option. For example, see:
vlib/v/preludes/test_runner_tap.v .
