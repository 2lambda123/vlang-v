	g->is_leaf_function = false;
		name =  str_intp(3, _MOV((StrIntpData[]){{_SLIT0, /*115 &string*/0xfe10, {.d_s = v__ast__Table_get_type_name(g->table, node.receiver_type)}}, {_SLIT("."), /*115 &string*/0xfe10, {.d_s = node.name}}, {_SLIT0, 0, { .d_c = 0 }}}));
		v__ast__Fn cfn = (*(v__ast__Fn*)map_get(ADDR(map, g->table->fns), &(string[]){node.name}, &(v__ast__Fn[]){ (v__ast__Fn){.params = __new_array(0, 0, sizeof(v__ast__Param)),.generic_names = __new_array(0, 0, sizeof(string)),.dep_names = __new_array(0, 0, sizeof(string)),.attrs = __new_array(0, 0, sizeof(v__ast__Attr)),.name = (string){.str=(byteptr)"", .is_lit=1},.mod = (string){.str=(byteptr)"", .is_lit=1},.file = (string){.str=(byteptr)"", .is_lit=1},.source_fn = 0,.return_type_pos = (v__token__Pos){.len = 0,.line_nr = 0,.pos = 0,.col = 0,.last_line = 0,},.pos = (v__token__Pos){.len = 0,.line_nr = 0,.pos = 0,.col = 0,.last_line = 0,},.usages = 0,.ctdefine_idx = 0,.return_type = 0,.receiver_type = 0,.no_body = 0,.is_keep_alive = 0,.is_test = 0,.is_method = 0,.is_file_translated = 0,.is_unsafe = 0,.is_noreturn = 0,.is_placeholder = 0,.is_ctor_new = 0,.is_variadic = 0,.is_pub = 0,.is_deprecated = 0,.is_main = 0,.is_conditional = 0,} }));
		eprintln(str_intp(1, _MOV((StrIntpData[]){{_SLIT("&"), 0xfe10 ,{.d_s = isnil(g->table) ? _SLIT("nil") : v__ast__Table_str(*g->table)}}})));
		eprintln( str_intp(2, _MOV((StrIntpData[]){{_SLIT("------- "), /*112 &voidptr*/0xfe11, {.d_p = (void*)(((voidptr)(g->table)))}}, {_SLIT0, 0, { .d_c = 0 }}})));
		eprintln( str_intp(2, _MOV((StrIntpData[]){{_SLIT("------- "), /*112 &voidptr*/0xfe11, {.d_p = (void*)(((voidptr)(g->table)))}}, {_SLIT0, 0, { .d_c = 0 }}})));
	eprintln( str_intp(2, _MOV((StrIntpData[]){{_SLIT("------- what?? "), /*112 &voidptr*/0xfe11, {.d_p = (void*)(((voidptr)(g->table)))}}, {_SLIT0, 0, { .d_c = 0 }}})));
			multi_return_bool_bool_int mr_14588 = v__ast__TypeSymbol_str_method_info(v__ast__Table_sym(g->table, typ));
		wasm__Function_call_import(&g->func, _v_namespace, name);
		wasm__Function_call(&g->func, name);
				wasm__Function_drop(&g->func);
		wasm__Function_unreachable(&g->func);
