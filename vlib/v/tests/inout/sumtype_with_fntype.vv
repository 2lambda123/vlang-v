type Fn = fn () int | fn (int) int
<<<<<<< HEAD

fn abc(n int) Fn {
	if n == 1 {
		return fn () int {
			return 123
		}
	} else {
		return fn (x int) int {
			return x
		}
	}
}

fn main() {
	println(abc(1))
	println(abc(2))

	x1 := abc(1)
	y1 := x1 as fn () int
	println(y1())
	if x1 is fn () int {
		println(x1())
	}

	match x1 {
		fn () int {
			println(x1())
		}
		else {}
	}

	x2 := abc(2)
	y2 := x2 as fn (int) int
	println(y2(321))
	if x2 is fn (int) int {
		println(x2(321))
	}

	match x2 {
		fn (int) int {
			println(x2(321))
		}
		else {}
	}
=======

fn main() {
	f1 := Fn(fn (a int) int {
		return a
	})
	println(typeof(f1).name)

	f2 := Fn(fn () int {
		return 22
	})
	println(typeof(f2).name)
>>>>>>> improved docs and making it possible to customize csrf-cookie's http-only-status. Default will be true.
}
