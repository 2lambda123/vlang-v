module main

pub struct PageObject {
	key []u8
}

fn compare_bytes1(a []u8, b []u8) int {
	return a[0] - b[0]
}

fn compare_bytes2(a []u8, b []u8) int {
	x := int(a[0] - b[0])
	return x
}

fn sort_and_print1(mut objects []PageObject) {
	objects.sort_with_compare(fn (a &PageObject, b &PageObject) int {
		return compare_bytes1(a.key, b.key)
	})

	for object in objects {
		print('${object.key.bytestr()} ')
	}
	println('')
}

fn sort_and_print2(mut objects []PageObject) {
	objects.sort_with_compare(fn (a &PageObject, b &PageObject) int {
		return compare_bytes2(a.key, b.key)
	})

	for object in objects {
		print('${object.key.bytestr()} ')
	}
	println('')
}

fn main() {
	a := PageObject{
		key: 'A'.bytes()
	}
	b := PageObject{
		key: 'B'.bytes()
	}
	c := PageObject{
		key: 'C'.bytes()
	}

	mut objects11 := [b, a]
	sort_and_print1(mut objects11)

	mut objects12 := [a, b]
	sort_and_print1(mut objects12)

	mut objects13 := [a, b, c]
	sort_and_print1(mut objects13)

	mut objects21 := [b, a]
	sort_and_print2(mut objects21)

	mut objects22 := [a, b]
	sort_and_print2(mut objects22)

	mut objects23 := [a, b, c]
	sort_and_print2(mut objects23)

}
