/* struct AA {
	a int = 22
	b i64
}

pub fn zeroed() {
	_ := AA{}
}

pub fn field() {
	_ := AA{a: 23}
}

pub fn selector(input int) int {
	mut a := AA{}
	
	c := 10 + a.a
	
	return c
}

pub fn reassign(input int) int {
	mut a := AA{}

	a = AA{b: input}
	
	return int(a.b + input)
} */

struct BB {
mut:
	a i64 = 22
	b i64
	c i64
}

/* pub fn give(val int) int {

	mut a := BB{}

	a.b = val
	
	return take(a)
} */

/* pub fn take(input BB) int {
	return int(input.b)
} */


struct BB_ {
mut:
	a i64 = 22
	b AA_
}

struct AA_ {
mut:
	a i64 = 91
	b i64 = 92
	c i64 = 93
}

fn e() BB_ {
	return BB_{a: 2}
}

pub fn make(nval AA_) i64 {
	val := BB_{b: nval}

	return val.b.b
}

pub fn return_make(nval int) int {
	val := make(AA_{b: nval})
	return int(val)
}

/* fn my_func(val int) AA_ {
	return AA_{b: val}
}

fn accept() {
	my_func(20)
} */