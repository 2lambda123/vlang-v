// labeled loop test.

mut x int

fn f0() {
    L1: for {
        /* loop label L1 declared but not used.*/ 
    }
    L2: for{
        break L2
        break L3 /* invalid break statement loop label L3. */
    }
    L3: for{
        continue L3
        continue L4 /* invalid continue statement loop label L4. */
    }
    L4: if true{
        break L1 /* L1 is not a loop label. */
    }
    L5: match {
        break L2 /* L2 is not a loop label. */
    }
    L5:
        f0()
    L6:
        f0()
    L6a: L6b: for {
        break L6a /* invalid loop label L6a. */
        continue L6a /* invalid loop label L6a.*/
        continue L6b
    }
    goto L7 /* label L7 is not define. */
}

fn f1(){
    L1: for {
        if x == 0{
            break L1
        }
        if x == 1{
            continue L1
        }
        goto L1
    }
    L2:
    f1()
    if x == 2 {
        break L2 /* L2 not a loop label. */
    }
    if x == 3 {
        continue L2 /* L2 not a loop label. */
    }
    if x == 4 {
        goto L2
    }
}

fn f2(){
    L1:
    L2:
    L3: for {
            break L1 /* L1 is invalid loop label. */
            break L2 /* L2 is invalid loop label. */
            break L3
            continue L1 /* L1 is invalid loop label. */
            continue L2 /* L2 is invalid loop label. */
            continue L3
            goto L1
            goto L2
            goto L3
    }
}

fn f3(){
    L1: /* label scope not solved. */
}

fn f4() {
    if x == 0{
        goto L1
    }
    L1:
}