module uri

import strings

const uri_encode_tbl = [
	// vfmt off
	'%00','%01','%02','%03','%04','%05','%06','%07','%08','%09','%0A','%0B','%0C','%0D','%0E','%0F',
	'%10','%11','%12','%13','%14','%15','%16','%17','%18','%19','%1A','%1B','%1C','%1D','%1E','%1F',
	'%20','%21','%22','%23','%24','%25','%26','%27','%28','%29','%2A','%2B','%2C','___','___','%2F',
	'___','___','___','___','___','___','___','___','___','___','%3A','%3B','%3C','%3D','%3E','%3F',
	'%40','___','___','___','___','___','___','___','___','___','___','___','___','___','___','___',
	'___','___','___','___','___','___','___','___','___','___','___','%5B','%5C','%5D','%5E','___',
	'%60','___','___','___','___','___','___','___','___','___','___','___','___','___','___','___',
	'___','___','___','___','___','___','___','___','___','___','___','%7B','%7C','%7D','___','%7F',
	'%80','%81','%82','%83','%84','%85','%86','%87','%88','%89','%8A','%8B','%8C','%8D','%8E','%8F',
	'%90','%91','%92','%93','%94','%95','%96','%97','%98','%99','%9A','%9B','%9C','%9D','%9E','%9F',
	'%A0','%A1','%A2','%A3','%A4','%A5','%A6','%A7','%A8','%A9','%AA','%AB','%AC','%AD','%AE','%AF',
	'%B0','%B1','%B2','%B3','%B4','%B5','%B6','%B7','%B8','%B9','%BA','%BB','%BC','%BD','%BE','%BF',
	'%C0','%C1','%C2','%C3','%C4','%C5','%C6','%C7','%C8','%C9','%CA','%CB','%CC','%CD','%CE','%CF',
	'%D0','%D1','%D2','%D3','%D4','%D5','%D6','%D7','%D8','%D9','%DA','%DB','%DC','%DD','%DE','%DF',
	'%E0','%E1','%E2','%E3','%E4','%E5','%E6','%E7','%E8','%E9','%EA','%EB','%EC','%ED','%EE','%EF',
	'%F0','%F1','%F2','%F3','%F4','%F5','%F6','%F7','%F8','%F9','%FA','%FB','%FC','%FD','%FE','%FF',
	// vfmt on
]

const hexval = [
	// vfmt off
	u8(0xFF),0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	// vfmt on
]

// encode encodes the V string `src` using [RFC3986](https://tools.ietf.org/html/rfc3986) and returns the encoded V string
pub fn encode(src string) string {
	mut dst := strings.new_builder(3 * src.len)
	for octet in src {
		code := uri_encode_tbl[int(octet)]
		if code != '___' {
			dst.write_string(code)
		} else {
			dst.write_rune(octet)
		}
	}
	return dst.str()
}

// decode decodes a V string `src` using [RFC3986](https://tools.ietf.org/html/rfc3986) and returns the decoded string
// When decoding, invalid escape sequences are preserved.
pub fn decode(src string) string {
	mut dst := strings.new_builder(src.len)
	mut i := 0
	mut copy_char := true
	for i < src.len {
		copy_char = true
		if src[i] == `%` && i + 2 < src.len {
			v1 := hexval[int(src[i + 1])]
			v2 := hexval[int(src[i + 2])]

			// skip invalid hex sequences
			if v1 | v2 != 0xFF {
				dst.write_byte((v1 << 4) | v2)
				i += 3
				copy_char = false
			}
		}
		if copy_char {
			dst.write_rune(src[i])
			i++
		}
	}
	return dst.str()
}
