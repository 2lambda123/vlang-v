// V_COMMIT_HASH f059a9e
// V_CURRENT_COMMIT_HASH 29ab60f
// Generated by the V compiler

"use strict";

/** @namespace builtin */
const builtin = (function () {
	function i8(val = new Number(0)) { this.val = val | 0; }
	i8.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return (this.val | 0).toString() }
	};

	function i16(val = new Number(0)) { this.val = val | 0; }
	i16.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return (this.val | 0).toString() }
	};

	function int(val = new Number(0)) { this.val = val | 0; }
	int.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return (this.val | 0).toString() }
	};

	function i64(val = new Number(0)) { this.val = val | 0; }
	i64.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return (this.val | 0).toString() }
	};

	function byte(val = new Number(0)) { this.val = val | 0; }
	byte.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return (this.val | 0).toString() }
	};

	function u16(val = new Number(0)) { this.val = val | 0; }
	u16.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return (this.val | 0).toString() }
	};

	function u32(val = new Number(0)) { this.val = val | 0; }
	u32.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return (this.val | 0).toString() }
	};

	function u64(val = new Number(0)) { this.val = val | 0; }
	u64.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return (this.val | 0).toString() }
	};

	function f32(val = new Number(0)) { this.val = val; }
	f32.prototype = {
		val: new Number(0),
		valueOf() { return this.val },
		toString() { return this.val.toString() }
	};

	function f64(val = new Number(0)) { this.val = val; }
	f64.prototype = {
		val: new Number(0),
		valueOf() { return this.val },
		toString() { return this.val.toString() }
	};

	function int_literal(val = new Number(0)) { this.val = val | 0; }
	int_literal.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return (this.val | 0).toString() }
	};

	function float_literal(val = new Number(0)) { this.val = val; }
	float_literal.prototype = {
		val: new Number(0),
		valueOf() { return this.val },
		toString() { return this.val.toString() }
	};

	function size_t(val = new Number(0)) { this.val = val | 0; }
	size_t.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0 },
		toString() { return (this.val | 0).toString() }
	};

	function bool(val = new Boolean(false)) { this.val = val; }
	bool.prototype = {
		val: new Boolean(false),
		valueOf() { return this.val },
		toString() { return this.val.toString() }
	};

	function string(str = new String("")) { this.str = str; }
	string.prototype = {
		val: new String(""),
		get length() { return this.str.length },
		/**
		 * @function
		 * @param {int} a
		 * @param {int} b
		 * @returns {string}
		*/
		slice(a, b) {
			const s = this;
			return new string(s.str.slice(a, b).toString());
		},
		valueOf() { return this.str },
		toString() { return this.str.toString() }
	};

	function map(val = new Map()) { this.val = val; }
	map.prototype = {
		val: new Map(),
		valueOf() { return this.val },
		toString() { return this.val.toString() }
	};

	function array(val = new Array()) { this.val = val; }
	array.prototype = {
		val: new Array(),
		valueOf() { return this.val },
		toString() { return this.val.toString() }
	};

	/**
	 * @function
	 * @param {any} s
	 * @returns {void}
	*/
	function js_throw(s) {
		throw (s instanceof Error ? s : new Error(s))
	}

	/**
	 * @function
	 * @param {any} s
	 * @returns {void}
	*/
	function println(s) {
		console.log(s.toString());
	}

	/**
	 * @function
	 * @param {any} s
	 * @returns {void}
	*/
	function print(s) {
		process.stdout.write(s.toString());
	}

	/**
	 * @function
	 * @param {any} s
	 * @returns {void}
	*/
	function eprintln(s) {
		console.error(s.toString());
	}

	/**
	 * @function
	 * @param {any} s
	 * @returns {void}
	*/
	function eprint(s) {
		process.stderr.write(s.toString());
	}

	/**
	 * @function
	 * @param {int} c
	 * @returns {void}
	*/
	function exit(c) {
		process.exit(c);
		builtin.js_throw(new string(`exit(${c})`));
	}

	/**
	 * @function
	 * @param {any} opt
	 * @returns {any}
	*/
	function unwrap(opt) {
		/** @type {Option} */
		const o = new Option(opt);
		if (o.not_ok) {
			builtin.js_throw(o.error);
		}
		
		return opt;
	}

	/**
	 * @function
	 * @param {string} s
	 * @returns {void}
	*/
	function panic(s) {
		builtin.eprintln(new string(`V panic: ${s}`));
		builtin.exit(int(1));
	}

	/**
	 * @constructor
	 * @param {{not_ok?: bool, is_none?: bool, error?: string, ecode?: int, data?: any}} init
	*/
	function Option({ not_ok = new bool(false), is_none = new bool(false), error = new string(""), ecode = new int(0), data = undefined }) {
		this.not_ok = not_ok
		this.is_none = is_none
		this.error = error
		this.ecode = ecode
		this.data = data
	};
	Option.prototype = {
		/** @type {bool} */
		not_ok: new bool(false),
		/** @type {bool} */
		is_none: new bool(false),
		/** @type {string} */
		error: new string(""),
		/** @type {int} */
		ecode: new int(0),
		/** @type {any} */
		data: undefined,
		/**
		 * @function
		 * @returns {string}
		*/
		str() {
			const o = this;
			if (!o.not_ok) {
				return new string('Option{ ok }');
			}
			
			if (o.is_none) {
				return new string('Option{ none }');
			}
			
			return new string(`Option{ error: "${o.error}" }`);
		},
		toString() {
			return `Option { not_ok: ${this["not_ok"].toString()} , is_none: ${this["is_none"].toString()} , error: "${this["error"].toString()}", ecode: ${this["ecode"].toString()} , data: ${this["data"].toString()} }`
		}
	};

	/**
	 * @function
	 * @param {string} s
	 * @returns {Option}
	*/
	function error(s) {
		return new Option({
			not_ok: true,
			is_none: false,
			error: s
		});
	}

	/**
	 * @function
	 * @param {string} s
	 * @param {int} code
	 * @returns {Option}
	*/
	function error_with_code(s, code) {
		return new Option({
			not_ok: true,
			is_none: false,
			error: s,
			ecode: code
		});
	}

	/* module exports */
	return {
		i8,
		i16,
		int,
		i64,
		byte,
		u16,
		u32,
		u64,
		f32,
		f64,
		int_literal,
		float_literal,
		size_t,
		bool,
		string,
		map,
		array,
		js_throw,
		println,
		print,
		eprintln,
		eprint,
		exit,
		unwrap,
		panic,
		error,
		error_with_code
	};
})();
// builtin type casts
const [i8, i16, int, i64, byte, u16, u32, u64, f32, f64, int_literal, float_literal, size_t, bool, string, map, array] = [
	function(val) { return new builtin.i8(val) },
	function(val) { return new builtin.i16(val) },
	function(val) { return new builtin.int(val) },
	function(val) { return new builtin.i64(val) },
	function(val) { return new builtin.byte(val) },
	function(val) { return new builtin.u16(val) },
	function(val) { return new builtin.u32(val) },
	function(val) { return new builtin.u64(val) },
	function(val) { return new builtin.f32(val) },
	function(val) { return new builtin.f64(val) },
	function(val) { return new builtin.int_literal(val) },
	function(val) { return new builtin.float_literal(val) },
	function(val) { return new builtin.size_t(val) },
	function(val) { return new builtin.bool(val) },
	function(val) { return new builtin.string(val) },
	function(val) { return new builtin.map(val) },
	function(val) { return new builtin.array(val) }
]
/** @namespace main */
const main = (function () {
	/**
	 * @function
	 * @param {string} s
	 * @returns {string}
	*/
	function map_cb(s) {
		return string(`CB: ${s}`);
	}

	/**
	 * @function
	 * @param {int} n
	 * @returns {bool}
	*/
	function filter_cb(n) {
		return n < int(4);
	}

	/**
	 * @function
	 * @param {...array(int)} args
	 * @returns {void}
	*/
	function variadic(...args) {
		builtin.println(args);
		builtin.println(args[int(0)]);
		builtin.println(args[int(1)]);
	}

	/**
	 * @function
	 * @returns {void}
	*/
	function vararg_test() {
		variadic(int(1), int(2), int(3));
	}

	/* program entry point */
	(function() {
		vararg_test();
		/** @type {array(string)} */
		const arr1 = [string('Hello'), string('JS'), string('Backend')];
		/** @type {array(int)} */
		let arr2 = [int(1), int(2), int(3), int(4), int(5)];
		/** @type {array(string)} */
		const slice1 = arr1.slice(int(1), int(3));
		/** @type {array(int)} */
		const slice2 = arr2.slice(0, int(3));
		/** @type {array(int)} */
		const slice3 = arr2.slice(int(3), arr2.length);
		/** @type {string} */
		const idx1 = slice1[int(1)];
		/** @type {int} */
		arr2[int(0)] = int(1);
		/** @type {int} */
		arr2[int_literal(int(0) + int(1))] = int(2);
		builtin.println(arr2);
		arr2.push(int(6));
		arr2.push(...[int(7), int(8), int(9)]);
		builtin.println(arr2);
		builtin.println(string('\n\n'));
		/** @type {string} */
		let slice4 = idx1.slice(0, int(4));
		builtin.print(string('Back\t=> '));
		builtin.println(slice4);
		/** @type {byte} */
		const idx2 = slice4.str.charCodeAt(int(0));
		builtin.print(string('66\t=> '));
		builtin.println(idx2);
		/** @type {Map<string, string>} */
		let m = new Map();
		/** @type {string} */
		const key = string('key');
		/** @type {string} */
		m.set(key.toString(), string('value'));
		/** @type {string} */
		const val = m.get(string('key').toString());
		builtin.print(string('value\t=> '));
		builtin.println(val);
		builtin.print(string('true\t=> '));
		builtin.println(arr1.includes(string('JS').str));
		builtin.print(string('false\t=> '));
		builtin.println(!(arr2.includes(int(3))));
		builtin.print(string('true\t=> '));
		builtin.println(m.has(string('key').str));
		builtin.print(string('true\t=> '));
		builtin.println(!(m.has(string('badkey').str)));
		builtin.print(string('true\t=> '));
		builtin.println(string('hello').str.includes(string('o').str));
		for (let _tmp1 = 0; _tmp1 < arr1.length; ++_tmp1) {
		}
		
		builtin.println(string('0 to 8\t=>'));
		for (let i = 0; i < arr2.length; ++i) {
			builtin.println(i);
		}
		
		builtin.println(string('\n\n4 to 5\t=> '));
		for (let _tmp2 = 0; _tmp2 < slice3.length; ++_tmp2) {
			const v = slice3[_tmp2];
			builtin.println(v);
		}
		
		builtin.println(int(f32(1.5)));
		builtin.println(string('\n\n'));
		/** @type {array(string)} */
		const a = arr1.map(it => string(`VAL: ${it}`));
		/** @type {array(string)} */
		const b = arr1.map(map_cb);
		/** @type {array(string)} */
		const c = arr1.map(it => map_cb(it));
		/** @type {array(string)} */
		const d = arr1.map(function (a) {
			return string(`ANON: ${a}`);
		});
		/** @type {array(int_literal)} */
		const e = arr1.map(it => int(456));
		builtin.println(a);
		builtin.println(b);
		builtin.println(c);
		builtin.println(d);
		builtin.println(e);
		builtin.println(string('\n\n'));
		/** @type {array(int)} */
		const aa = arr2.filter(it => it < int(4));
		/** @type {array(int)} */
		const bb = arr2.filter(filter_cb);
		/** @type {array(int)} */
		const cc = arr2.filter(it => filter_cb(it));
		/** @type {array(int)} */
		const dd = arr2.filter(function (a) {
			return a < int(4);
		});
		builtin.println(aa);
		builtin.println(bb);
		builtin.println(cc);
		builtin.println(dd);
		/** @type {undefined(int)} */
		const f1 = [int(1), int(2), int(3), int(4), int(5)];
		/** @type {undefined(f32)} */
		let f2 = [int(8)];
		/** @type {f32} */
		f2[int(0)] = f32(1.23);
		/** @type {undefined(string)} */
		const f3 = [string('foo'), string('bar')];
		/** @type {undefined(u64)} */
		const f4 = [int(0xffffffffffffffff), int(0xdeadface)];
		builtin.println(string(`
${f1}
${f2}
${f3}
${f4}`));
	})();

	/* module exports */
	return {};
})();


