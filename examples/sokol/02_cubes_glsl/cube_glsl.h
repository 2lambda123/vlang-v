#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Overview:

        Shader program 'cube':
            Get shader desc: cube_shader_desc()
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_pos = 0
                    ATTR_vs_color0 = 1
                    ATTR_vs_texcoord0 = 2
                Uniform block 'vs_params':
                    C struct: vs_params_t
                    Bind slot: SLOT_vs_params = 0
            Fragment shader: fs
                Uniform block 'fs_params':
                    C struct: fs_params_t
                    Bind slot: SLOT_fs_params = 0
                Image 'tex':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_tex = 0


    Shader descriptor structs:

        sg_shader cube = sg_make_shader(cube_shader_desc());

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_pos] = { ... },
                    [ATTR_vs_color0] = { ... },
                    [ATTR_vs_texcoord0] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_tex = 0;

    Bind slot and C-struct for uniform block 'vs_params':

        vs_params_t vs_params = {
            .mvp = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_params, &vs_params, sizeof(vs_params));

    Bind slot and C-struct for uniform block 'fs_params':

        fs_params_t fs_params = {
            .text_res = ...;
            .iTime = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fs_params, &fs_params, sizeof(fs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_vs_pos (0)
#define ATTR_vs_color0 (1)
#define ATTR_vs_texcoord0 (2)
#define SLOT_tex (0)
#define SLOT_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_params_t {
    float mvp[16];
} vs_params_t;
#pragma pack(pop)
#define SLOT_fs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_params_t {
    float text_res[2];
    float iTime;
    uint8_t _pad_12[4];
} fs_params_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 vs_params[4];
    layout(location = 0) in vec4 pos;
    out vec4 color;
    layout(location = 1) in vec4 color0;
    out vec2 uv;
    layout(location = 2) in vec2 texcoord0;
    
    void main()
    {
        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * pos;
        color = color0;
        uv = texcoord0;
    }
    
*/
static const char vs_source_glsl330[326] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,
    0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x30,0x3b,0x0a,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,
    0x72,0x64,0x30,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,
    0x5d,0x29,0x20,0x2a,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 fs_params[1];
    uniform sampler2D tex;
    
    in vec4 color;
    in vec2 uv;
    layout(location = 0) out vec4 frag_color;
    
    float sphere(vec3 ray, vec3 dir, vec3 center, float radius)
    {
        vec3 _33 = ray - center;
        float _45 = dot(dir, _33);
        float _51 = (_45 * _45) - (dot(_33, _33) - (radius * radius));
        float _58 = (-_45) - sqrt(abs(_51));
        return mix(-1.0, _58, step(0.0, min(_58, _51)));
    }
    
    vec3 background(float t, vec3 rd)
    {
        float _83 = max(0.0, dot(rd, normalize(vec3(sin(t), 0.60000002384185791015625, cos(t)))));
        return ((vec3(2.0, 1.60000002384185791015625, 1.0) * (pow(_83, 256.0) + (0.20000000298023223876953125 * pow(_83, 2.0)))) + (vec3(0.4000000059604644775390625, 0.300000011920928955078125, 0.20000000298023223876953125) * pow(max(0.0, -rd.y), 0.5))) + (vec3(0.5, 0.60000002384185791015625, 0.699999988079071044921875) * pow(max(0.0, rd.y), 1.0));
    }
    
    vec4 mainImage(vec2 fragCoord)
    {
        vec3 _136 = normalize(vec3((fragCoord - vec2(0.4000000059604644775390625)) * 2.0, 1.0));
        vec3 rd = _136;
        vec3 param = vec3(0.0, 0.0, -3.0);
        vec3 param_1 = _136;
        vec3 param_2 = vec3(0.0);
        float param_3 = 1.0;
        float _147 = sphere(param, param_1, param_2, param_3);
        vec3 _151 = rd;
        float param_4 = fs_params[0].z;
        vec3 param_5 = _151;
        vec3 _170 = rd;
        vec3 _172 = reflect(_170, normalize(vec3(-0.0, -0.0, 3.0) - (_151 * _147)));
        rd = _172;
        float param_6 = fs_params[0].z;
        vec3 param_7 = _172;
        return vec4(mix(background(param_4, param_5), background(param_6, param_7) * vec3(0.89999997615814208984375, 0.800000011920928955078125, 1.0), vec3(step(0.0, _147))), 1.0);
    }
    
    void main()
    {
        vec2 param = uv;
        frag_color = (((texture(tex, uv * vec2(0.25)) * color) * mod(fs_params[0].z, 5.0)) * 0.100000001490116119384765625) + mainImage(param);
    }
    
*/
static const char fs_source_glsl330[1843] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x3b,0x0a,
    0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x70,0x68,
    0x65,0x72,0x65,0x28,0x76,0x65,0x63,0x33,0x20,0x72,0x61,0x79,0x2c,0x20,0x76,0x65,
    0x63,0x33,0x20,0x64,0x69,0x72,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x63,0x65,0x6e,
    0x74,0x65,0x72,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x72,0x61,0x64,0x69,0x75,
    0x73,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x33,
    0x33,0x20,0x3d,0x20,0x72,0x61,0x79,0x20,0x2d,0x20,0x63,0x65,0x6e,0x74,0x65,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x34,0x35,0x20,
    0x3d,0x20,0x64,0x6f,0x74,0x28,0x64,0x69,0x72,0x2c,0x20,0x5f,0x33,0x33,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x35,0x31,0x20,0x3d,
    0x20,0x28,0x5f,0x34,0x35,0x20,0x2a,0x20,0x5f,0x34,0x35,0x29,0x20,0x2d,0x20,0x28,
    0x64,0x6f,0x74,0x28,0x5f,0x33,0x33,0x2c,0x20,0x5f,0x33,0x33,0x29,0x20,0x2d,0x20,
    0x28,0x72,0x61,0x64,0x69,0x75,0x73,0x20,0x2a,0x20,0x72,0x61,0x64,0x69,0x75,0x73,
    0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x35,
    0x38,0x20,0x3d,0x20,0x28,0x2d,0x5f,0x34,0x35,0x29,0x20,0x2d,0x20,0x73,0x71,0x72,
    0x74,0x28,0x61,0x62,0x73,0x28,0x5f,0x35,0x31,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6d,0x69,0x78,0x28,0x2d,0x31,0x2e,0x30,
    0x2c,0x20,0x5f,0x35,0x38,0x2c,0x20,0x73,0x74,0x65,0x70,0x28,0x30,0x2e,0x30,0x2c,
    0x20,0x6d,0x69,0x6e,0x28,0x5f,0x35,0x38,0x2c,0x20,0x5f,0x35,0x31,0x29,0x29,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x62,0x61,0x63,0x6b,0x67,0x72,
    0x6f,0x75,0x6e,0x64,0x28,0x66,0x6c,0x6f,0x61,0x74,0x20,0x74,0x2c,0x20,0x76,0x65,
    0x63,0x33,0x20,0x72,0x64,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x38,0x33,0x20,0x3d,0x20,0x6d,0x61,0x78,0x28,0x30,0x2e,0x30,
    0x2c,0x20,0x64,0x6f,0x74,0x28,0x72,0x64,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x69,0x7a,0x65,0x28,0x76,0x65,0x63,0x33,0x28,0x73,0x69,0x6e,0x28,0x74,0x29,0x2c,
    0x20,0x30,0x2e,0x36,0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x33,0x38,0x34,0x31,0x38,
    0x35,0x37,0x39,0x31,0x30,0x31,0x35,0x36,0x32,0x35,0x2c,0x20,0x63,0x6f,0x73,0x28,
    0x74,0x29,0x29,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x28,0x28,0x76,0x65,0x63,0x33,0x28,0x32,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x36,0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x33,0x38,0x34,0x31,0x38,0x35,0x37,
    0x39,0x31,0x30,0x31,0x35,0x36,0x32,0x35,0x2c,0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,
    0x20,0x28,0x70,0x6f,0x77,0x28,0x5f,0x38,0x33,0x2c,0x20,0x32,0x35,0x36,0x2e,0x30,
    0x29,0x20,0x2b,0x20,0x28,0x30,0x2e,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x32,
    0x39,0x38,0x30,0x32,0x33,0x32,0x32,0x33,0x38,0x37,0x36,0x39,0x35,0x33,0x31,0x32,
    0x35,0x20,0x2a,0x20,0x70,0x6f,0x77,0x28,0x5f,0x38,0x33,0x2c,0x20,0x32,0x2e,0x30,
    0x29,0x29,0x29,0x29,0x20,0x2b,0x20,0x28,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x34,
    0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,
    0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x2c,0x20,0x30,0x2e,0x33,0x30,0x30,0x30,
    0x30,0x30,0x30,0x31,0x31,0x39,0x32,0x30,0x39,0x32,0x38,0x39,0x35,0x35,0x30,0x37,
    0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
    0x32,0x39,0x38,0x30,0x32,0x33,0x32,0x32,0x33,0x38,0x37,0x36,0x39,0x35,0x33,0x31,
    0x32,0x35,0x29,0x20,0x2a,0x20,0x70,0x6f,0x77,0x28,0x6d,0x61,0x78,0x28,0x30,0x2e,
    0x30,0x2c,0x20,0x2d,0x72,0x64,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,0x35,0x29,0x29,
    0x29,0x20,0x2b,0x20,0x28,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x35,0x2c,0x20,0x30,
    0x2e,0x36,0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x33,0x38,0x34,0x31,0x38,0x35,0x37,
    0x39,0x31,0x30,0x31,0x35,0x36,0x32,0x35,0x2c,0x20,0x30,0x2e,0x36,0x39,0x39,0x39,
    0x39,0x39,0x39,0x38,0x38,0x30,0x37,0x39,0x30,0x37,0x31,0x30,0x34,0x34,0x39,0x32,
    0x31,0x38,0x37,0x35,0x29,0x20,0x2a,0x20,0x70,0x6f,0x77,0x28,0x6d,0x61,0x78,0x28,
    0x30,0x2e,0x30,0x2c,0x20,0x72,0x64,0x2e,0x79,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x34,0x20,0x6d,0x61,0x69,0x6e,0x49,
    0x6d,0x61,0x67,0x65,0x28,0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,
    0x6f,0x72,0x64,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x5f,0x31,0x33,0x36,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,
    0x28,0x76,0x65,0x63,0x33,0x28,0x28,0x66,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,
    0x20,0x2d,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x34,0x30,0x30,0x30,0x30,0x30,
    0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,
    0x36,0x32,0x35,0x29,0x29,0x20,0x2a,0x20,0x32,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x72,0x64,0x20,
    0x3d,0x20,0x5f,0x31,0x33,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x2d,0x33,0x2e,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,
    0x3d,0x20,0x5f,0x31,0x33,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,
    0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x34,0x37,0x20,0x3d,0x20,
    0x73,0x70,0x68,0x65,0x72,0x65,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x33,0x20,0x5f,0x31,0x35,0x31,0x20,0x3d,0x20,0x72,0x64,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,
    0x3d,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x35,0x20,0x3d,0x20,0x5f,0x31,0x35,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x5f,0x31,0x37,0x30,0x20,0x3d,0x20,0x72,0x64,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x37,0x32,0x20,0x3d,0x20,0x72,
    0x65,0x66,0x6c,0x65,0x63,0x74,0x28,0x5f,0x31,0x37,0x30,0x2c,0x20,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x76,0x65,0x63,0x33,0x28,0x2d,0x30,0x2e,0x30,
    0x2c,0x20,0x2d,0x30,0x2e,0x30,0x2c,0x20,0x33,0x2e,0x30,0x29,0x20,0x2d,0x20,0x28,
    0x5f,0x31,0x35,0x31,0x20,0x2a,0x20,0x5f,0x31,0x34,0x37,0x29,0x29,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x64,0x20,0x3d,0x20,0x5f,0x31,0x37,0x32,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,
    0x20,0x3d,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,
    0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x37,0x20,0x3d,0x20,0x5f,0x31,0x37,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x34,0x28,0x6d,0x69,0x78,0x28,
    0x62,0x61,0x63,0x6b,0x67,0x72,0x6f,0x75,0x6e,0x64,0x28,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x34,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x29,0x2c,0x20,0x62,0x61,
    0x63,0x6b,0x67,0x72,0x6f,0x75,0x6e,0x64,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x37,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,
    0x33,0x28,0x30,0x2e,0x38,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x36,0x31,0x35,0x38,
    0x31,0x34,0x32,0x30,0x38,0x39,0x38,0x34,0x33,0x37,0x35,0x2c,0x20,0x30,0x2e,0x38,
    0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0x39,0x32,0x30,0x39,0x32,0x38,0x39,0x35,
    0x35,0x30,0x37,0x38,0x31,0x32,0x35,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,
    0x65,0x63,0x33,0x28,0x73,0x74,0x65,0x70,0x28,0x30,0x2e,0x30,0x2c,0x20,0x5f,0x31,
    0x34,0x37,0x29,0x29,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x75,
    0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x28,0x28,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,
    0x65,0x78,0x2c,0x20,0x75,0x76,0x20,0x2a,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,
    0x32,0x35,0x29,0x29,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x29,0x20,0x2a,0x20,
    0x6d,0x6f,0x64,0x28,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,
    0x2e,0x7a,0x2c,0x20,0x35,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,0x31,0x30,
    0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,0x30,0x31,0x31,0x36,0x31,0x31,0x39,
    0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x29,0x20,0x2b,0x20,0x6d,0x61,0x69,
    0x6e,0x49,0x6d,0x61,0x67,0x65,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before cube_glsl.h"
#endif
static inline const sg_shader_desc* cube_shader_desc(void) {
  if (sg_query_backend() == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "pos";
      desc.attrs[1].name = "color0";
      desc.attrs[2].name = "texcoord0";
      desc.vs.source = vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].uniforms[0].name = "fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.images[0].name = "tex";
      desc.fs.images[0].type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "cube_shader";
    };
    return &desc;
  }
  return 0;
}
