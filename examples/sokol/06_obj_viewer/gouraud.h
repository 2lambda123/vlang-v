#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Overview:

        Shader program 'gouraud':
            Get shader desc: gouraud_shader_desc()
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_a_Position = 0
                    ATTR_vs_a_Normal = 1
                    ATTR_vs_a_Color = 2
                    ATTR_vs_a_Texcoord0 = 3
                Uniform block 'vs_params':
                    C struct: vs_params_t
                    Bind slot: SLOT_vs_params = 0
            Fragment shader: fs
                Uniform block 'fs_params':
                    C struct: fs_params_t
                    Bind slot: SLOT_fs_params = 0
                Image 'tex':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_tex = 0


    Shader descriptor structs:

        sg_shader gouraud = sg_make_shader(gouraud_shader_desc());

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_a_Position] = { ... },
                    [ATTR_vs_a_Normal] = { ... },
                    [ATTR_vs_a_Color] = { ... },
                    [ATTR_vs_a_Texcoord0] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_tex = 0;

    Bind slot and C-struct for uniform block 'vs_params':

        vs_params_t vs_params = {
            .u_MVMatrix = ...;
            .u_MVPMatrix = ...;
            .u_NMatrix = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_params, &vs_params, sizeof(vs_params));

    Bind slot and C-struct for uniform block 'fs_params':

        fs_params_t fs_params = {
            .u_LightPos = ...;
            .ambientColor = ...;
            .diffuseColor = ...;
            .specularColor = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fs_params, &fs_params, sizeof(fs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_vs_a_Position (0)
#define ATTR_vs_a_Normal (1)
#define ATTR_vs_a_Color (2)
#define ATTR_vs_a_Texcoord0 (3)
#define SLOT_tex (0)
#define SLOT_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_params_t {
    float u_MVMatrix[16];
    float u_MVPMatrix[16];
    float u_NMatrix[16];
} vs_params_t;
#pragma pack(pop)
#define SLOT_fs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_params_t {
    float u_LightPos[4];
    float ambientColor[4];
    float diffuseColor[4];
    float specularColor[4];
} fs_params_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 vs_params[12];
    out vec3 v_Position;
    layout(location = 0) in vec4 a_Position;
    out vec4 v_Color;
    layout(location = 2) in vec4 a_Color;
    out vec3 v_Normal;
    layout(location = 1) in vec3 a_Normal;
    out vec2 uv;
    layout(location = 3) in vec2 a_Texcoord0;
    out vec3 v_Normal1;
    
    void main()
    {
        mat4 _20 = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]);
        v_Position = vec3((_20 * a_Position).xyz);
        v_Color = a_Color;
        vec4 _44 = vec4(a_Normal, 1.0);
        v_Normal = vec3((mat4(vs_params[8], vs_params[9], vs_params[10], vs_params[11]) * _44).xyz);
        uv = a_Texcoord0;
        v_Normal1 = normalize(vec3((_20 * _44).xyz));
        gl_Position = mat4(vs_params[4], vs_params[5], vs_params[6], vs_params[7]) * a_Position;
    }
    
*/
static const char vs_source_glsl330[757] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x32,0x5d,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x33,0x20,0x76,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,
    0x20,0x76,0x5f,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x5f,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x4e,0x6f,0x72,0x6d,0x61,
    0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,
    0x61,0x5f,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x32,0x20,0x61,0x5f,0x54,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x3b,
    0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x4e,0x6f,0x72,0x6d,
    0x61,0x6c,0x31,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x32,0x30,
    0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x31,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,
    0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x28,0x5f,0x32,0x30,0x20,0x2a,0x20,0x61,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x5f,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x61,0x5f,
    0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,
    0x5f,0x34,0x34,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x5f,0x4e,0x6f,0x72,
    0x6d,0x61,0x6c,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x5f,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x28,
    0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,
    0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,0x5d,0x2c,
    0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x30,0x5d,0x2c,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x31,0x5d,0x29,0x20,0x2a,
    0x20,0x5f,0x34,0x34,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x75,0x76,0x20,0x3d,0x20,0x61,0x5f,0x54,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x31,0x20,
    0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x76,0x65,0x63,0x33,
    0x28,0x28,0x5f,0x32,0x30,0x20,0x2a,0x20,0x5f,0x34,0x34,0x29,0x2e,0x78,0x79,0x7a,
    0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x35,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x36,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,
    0x5d,0x29,0x20,0x2a,0x20,0x61,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 fs_params[4];
    uniform sampler2D tex;
    
    in vec3 v_Position;
    in vec3 v_Normal;
    in vec2 uv;
    in vec3 v_Normal1;
    layout(location = 0) out vec4 frag_color;
    in vec4 v_Color;
    vec3 lightDirection;
    
    vec3 phongBRDF(vec3 lightDir, vec3 viewDir, vec3 normal, vec3 phongDiffuseCol, vec3 phongSpecularCol, float phongShininess)
    {
        return phongDiffuseCol + (phongSpecularCol * pow(max(dot(reflect(-lightDir, normal), viewDir), 0.0), phongShininess));
    }
    
    vec4 getPhong(vec4 diffuseColor)
    {
        vec3 _64 = normalize(-lightDirection);
        vec3 _74 = normalize(v_Normal);
        vec3 luminance = fs_params[1].xyz * 0.5;
        float _85 = dot(_64, _74);
        if (_85 > 0.0)
        {
            vec3 param = _64;
            vec3 param_1 = normalize(-v_Position);
            vec3 param_2 = _74;
            vec3 param_3 = diffuseColor.xyz;
            vec3 param_4 = fs_params[3].xyz;
            float param_5 = fs_params[3].w * 1000.0;
            luminance += (phongBRDF(param, param_1, param_2, param_3, param_4, param_5) * _85);
        }
        return vec4(luminance, 1.0);
    }
    
    void main()
    {
        lightDirection = -fs_params[0].xyz;
        vec4 _142 = texture(tex, uv);
        vec4 param = fs_params[2];
        frag_color = vec4(clamp(vec3(dot(normalize(v_Normal1), vec3(0.0, 0.447213590145111083984375, 0.89442718029022216796875)) * 0.1500000059604644775390625) + (_142.xyz * getPhong(param).xyz), vec3(0.0), vec3(1.0)), _142.w * fs_params[2].w);
    }
    
*/
static const char fs_source_glsl330[1412] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x3b,0x0a,
    0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x4e,
    0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x75,
    0x76,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x4e,0x6f,0x72,
    0x6d,0x61,0x6c,0x31,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,
    0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x5f,0x43,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x76,0x65,0x63,0x33,0x20,0x6c,0x69,0x67,0x68,0x74,0x44,0x69,0x72,0x65,0x63,
    0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x70,0x68,0x6f,0x6e,
    0x67,0x42,0x52,0x44,0x46,0x28,0x76,0x65,0x63,0x33,0x20,0x6c,0x69,0x67,0x68,0x74,
    0x44,0x69,0x72,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x69,0x65,0x77,0x44,0x69,
    0x72,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,
    0x76,0x65,0x63,0x33,0x20,0x70,0x68,0x6f,0x6e,0x67,0x44,0x69,0x66,0x66,0x75,0x73,
    0x65,0x43,0x6f,0x6c,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x68,0x6f,0x6e,0x67,
    0x53,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x43,0x6f,0x6c,0x2c,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x68,0x6f,0x6e,0x67,0x53,0x68,0x69,0x6e,0x69,0x6e,0x65,0x73,
    0x73,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x70,0x68,0x6f,0x6e,0x67,0x44,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,0x20,
    0x2b,0x20,0x28,0x70,0x68,0x6f,0x6e,0x67,0x53,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,
    0x43,0x6f,0x6c,0x20,0x2a,0x20,0x70,0x6f,0x77,0x28,0x6d,0x61,0x78,0x28,0x64,0x6f,
    0x74,0x28,0x72,0x65,0x66,0x6c,0x65,0x63,0x74,0x28,0x2d,0x6c,0x69,0x67,0x68,0x74,
    0x44,0x69,0x72,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x29,0x2c,0x20,0x76,0x69,
    0x65,0x77,0x44,0x69,0x72,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x70,0x68,
    0x6f,0x6e,0x67,0x53,0x68,0x69,0x6e,0x69,0x6e,0x65,0x73,0x73,0x29,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x76,0x65,0x63,0x34,0x20,0x67,0x65,0x74,0x50,0x68,0x6f,0x6e,0x67,
    0x28,0x76,0x65,0x63,0x34,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,
    0x6f,0x72,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,
    0x36,0x34,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x2d,
    0x6c,0x69,0x67,0x68,0x74,0x44,0x69,0x72,0x65,0x63,0x74,0x69,0x6f,0x6e,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x37,0x34,0x20,0x3d,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x76,0x5f,0x4e,0x6f,0x72,0x6d,
    0x61,0x6c,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x75,
    0x6d,0x69,0x6e,0x61,0x6e,0x63,0x65,0x20,0x3d,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x30,0x2e,0x35,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x38,0x35,0x20,
    0x3d,0x20,0x64,0x6f,0x74,0x28,0x5f,0x36,0x34,0x2c,0x20,0x5f,0x37,0x34,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x38,0x35,0x20,0x3e,0x20,0x30,
    0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,
    0x36,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x69,0x7a,0x65,0x28,0x2d,0x76,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x5f,0x37,0x34,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x33,0x20,0x3d,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x43,0x6f,0x6c,
    0x6f,0x72,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,0x66,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x2e,0x78,0x79,0x7a,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x35,0x20,0x3d,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x33,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x31,0x30,0x30,0x30,0x2e,0x30,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x75,0x6d,0x69,0x6e,0x61,
    0x6e,0x63,0x65,0x20,0x2b,0x3d,0x20,0x28,0x70,0x68,0x6f,0x6e,0x67,0x42,0x52,0x44,
    0x46,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x33,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x2c,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x35,0x29,0x20,0x2a,0x20,0x5f,0x38,0x35,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,
    0x65,0x63,0x34,0x28,0x6c,0x75,0x6d,0x69,0x6e,0x61,0x6e,0x63,0x65,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6c,0x69,0x67,0x68,0x74,0x44,
    0x69,0x72,0x65,0x63,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x2d,0x66,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x34,0x32,0x20,0x3d,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x2c,0x20,0x75,0x76,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,
    0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x34,0x28,0x63,0x6c,0x61,0x6d,0x70,0x28,0x76,0x65,0x63,0x33,0x28,
    0x64,0x6f,0x74,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x76,0x5f,
    0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x31,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,
    0x2e,0x30,0x2c,0x20,0x30,0x2e,0x34,0x34,0x37,0x32,0x31,0x33,0x35,0x39,0x30,0x31,
    0x34,0x35,0x31,0x31,0x31,0x30,0x38,0x33,0x39,0x38,0x34,0x33,0x37,0x35,0x2c,0x20,
    0x30,0x2e,0x38,0x39,0x34,0x34,0x32,0x37,0x31,0x38,0x30,0x32,0x39,0x30,0x32,0x32,
    0x32,0x31,0x36,0x37,0x39,0x36,0x38,0x37,0x35,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,
    0x31,0x35,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,
    0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,0x20,0x2b,0x20,0x28,0x5f,0x31,
    0x34,0x32,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x67,0x65,0x74,0x50,0x68,0x6f,0x6e,
    0x67,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x76,
    0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x31,
    0x2e,0x30,0x29,0x29,0x2c,0x20,0x5f,0x31,0x34,0x32,0x2e,0x77,0x20,0x2a,0x20,0x66,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2e,0x77,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before gouraud.h"
#endif
static inline const sg_shader_desc* gouraud_shader_desc(void) {
  if (sg_query_backend() == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "a_Position";
      desc.attrs[1].name = "a_Normal";
      desc.attrs[2].name = "a_Color";
      desc.attrs[3].name = "a_Texcoord0";
      desc.vs.source = vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 192;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 12;
      desc.fs.source = fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 64;
      desc.fs.uniform_blocks[0].uniforms[0].name = "fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.images[0].name = "tex";
      desc.fs.images[0].type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "gouraud_shader";
    };
    return &desc;
  }
  return 0;
}
